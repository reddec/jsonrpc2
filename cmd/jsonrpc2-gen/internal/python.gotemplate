from aiohttp import client
{{with definitions}}
from dataclasses import dataclass
{{- end}}
{{with enums}}
from enum import Enum
{{- end}}
# imports
{{range enums}}

class {{.TypeName}}(Enum):
    {{- range .FindEnumValues}}
    {{.Name | snakecase | upper}} = {{.Value}}
    {{- end}}

    def to_json(self) -> {{. | python}}:
        return self.value

    @staticmethod
    def from_json(payload: {{. | python}}) -> '{{.TypeName}}':
        return {{.TypeName}}(payload)
{{end}}
{{range definitions}}

@dataclass
class {{.TypeName}}:
{{- range .StructFields}}
    {{.Name | snakecase | escape}}: '{{. | python}}'
{{- end}}

    def to_json(self) -> dict:
        return {
    {{- range .StructFields}}
            "{{.Tag}}": {{to_json . (print "self." (.Name | snakecase | escape) )}},
    {{- end}}
        }

    @staticmethod
    def from_json(payload: dict) -> '{{.TypeName}}':
        return {{.TypeName}}(
{{- range .StructFields}}
                {{.Name | snakecase | escape}}={{from_json . (print "payload['" .Tag "']" )}},
{{- end}}
        )
{{end}}

class {{.Service.Name}}Error(RuntimeError):
    def __init__(self, method: str, code: int, message: str, data: Any):
        super().__init__('{}: {}: {} - {}'.format(method, code, message, data))
        self.code = code
        self.message = message
        self.data = data

    @staticmethod
    def from_json(method: str, payload: dict) -> '{{.Service.Name}}Error':
        return {{.Service.Name}}Error(
            method=method,
            code=payload['code'],
            message=payload['message'],
            data=payload.get('data')
        )


class {{.Service.Name}}Client:
    """
    {{.Service.Comment}}
    """

    def __init__(self, base_url: str = '{{.DocAddr}}', session: Optional[client.ClientSession] = None):
        self.__url = base_url
        self.__id = 1
        self.__request = session.request if session is not None else client.request

    def __next_id(self):
        self.__id += 1
        return self.__id
{{range $index, $method := .UsedMethods}}
    async def {{$method.Name | snakecase}}(self{{- range $index, $arg := $method.Args}}, {{$arg.Name | snakecase}}: {{$arg | python}}{{end}}) -> {{$method.Return | python}}:
        """
        {{$method.Comment}}
        """
        response = await self._invoke({
            "jsonrpc": "2.0",
            "method": "{{$.Generator.Qual $method}}",
            "id": self.__next_id(),
            "params": [{{- range $index, $arg := $method.Args}}{{to_json .  ($arg.Name | snakecase)}}, {{end}}]
        })
        assert response.status // 100 == 2, str(response.status) + " " + str(response.reason)
        payload = await response.json()
        if 'error' in payload:
            raise {{$.Service.Name}}Error.from_json('{{$method.Name | snakecase}}', payload['error'])
        return {{from_json $method.Return "payload['result']"}}
{{end}}
    async def _invoke(self, request):
        return await self.__request('POST', self.__url, json=request)


class {{.Service.Name}}Batch:
    """
    {{.Service.Comment}}
    """

    def __init__(self, client: {{.Service.Name}}Client, size: int = 10):
        self.__id = 1
        self.__client = client
        self.__requests = []
        self.__batch = {}
        self.__batch_size = size

    def __next_id(self):
        self.__id += 1
        return self.__id
{{range $index, $method := .UsedMethods}}
    def {{$method.Name | snakecase}}(self{{- range $index, $arg := $method.Args}}, {{$arg.Name | snakecase}}: {{$arg | python}}{{end}}):
        """
        {{$method.Comment}}
        """
        params = [{{- range $index, $arg := $method.Args}}{{to_json .  ($arg.Name | snakecase)}}, {{end}}]
        method = "{{$.Generator.Qual $method}}"
        self.__add_request(method, params, lambda payload: {{from_json $method.Return "payload"}})
{{end}}
    def __add_request(self, method: str, params, factory):
        request_id = self.__next_id()
        request = {
            "jsonrpc": "2.0",
            "method": method,
            "id": request_id,
            "params": params
        }
        self.__requests.append(request)
        self.__batch[request_id] = (request, factory)

    async def __aenter__(self):
        self.__batch = {}
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self()

    async def __call__(self) -> list:
        offset = 0
        num = len(self.__requests)
        results = []
        while offset < num:
            next_offset = offset + self.__batch_size
            batch = self.__requests[offset:min(num, next_offset)]
            offset = next_offset

            responses = await self.__post_batch(batch)
            results = results + responses

        self.__batch = {}
        self.__requests = []
        return results

    async def __post_batch(self, batch: list) -> list:
        response = await self.__client._invoke(batch)
        assert response.status // 100 == 2, str(response.status) + " " + str(response.reason)
        results = await response.json()
        ans = []
        for payload in results:
            request, factory = self.__batch[payload['id']]
            if 'error' in payload:
                raise {{$.Service.Name}}Error.from_json(request['method'], payload['error'])
            else:
                ans.append(factory(payload['result']))
        return ans