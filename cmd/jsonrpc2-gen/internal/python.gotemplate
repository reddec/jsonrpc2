from aiohttp import client
{{with definitions}}
from dataclasses import dataclass
{{- end}}
{{with enums}}
from enum import Enum
{{- end}}
# imports
{{range enums}}

class {{.TypeName}}(Enum):
    {{- range .FindEnumValues}}
    {{.Name | snakecase | upper}} = {{.Value}}
    {{- end}}

    def to_json(self) -> {{. | python}}:
        return self.value

    @staticmethod
    def from_json(payload: {{. | python}}) -> '{{.TypeName}}':
        return {{.TypeName}}(payload)
{{end}}
{{range definitions}}

@dataclass
class {{.TypeName}}:
{{- range .StructFields}}
    {{.Name | snakecase | escape}}: '{{. | python}}'
{{- end}}

    def to_json(self) -> dict:
        return {
    {{- range .StructFields}}
            "{{.Tag}}": {{to_json . (print "self." (.Name | snakecase | escape) )}},
    {{- end}}
        }

    @staticmethod
    def from_json(payload: dict) -> '{{.TypeName}}':
        return {{.TypeName}}(
{{- range .StructFields}}
                {{.Name | snakecase | escape}}={{from_json . (print "payload['" .Tag "']" )}},
{{- end}}
        )
{{end}}

class {{.Service.Name}}Error(RuntimeError):
    def __init__(self, method: str, code: int, message: str, data: Any):
        super().__init__('{}: {}: {} - {}'.format(method, code, message, data))
        self.code = code
        self.message = message
        self.data = data

    @staticmethod
    def from_json(method: str, payload: dict) -> '{{.Service.Name}}Error':
        return {{.Service.Name}}Error(
            method=method,
            code=payload['code'],
            message=payload['message'],
            data=payload.get('data')
        )


class {{.Service.Name}}Client:
    """
    {{.Service.Comment}}
    """

    def __init__(self, base_url: str = '{{.DocAddr}}', session: Optional[client.ClientSession] = None):
        self.__url = base_url
        self.__id = 1
        self.__request = session.request if session is not None else client.request

    def __next_id(self):
        self.__id += 1
        return self.__id
{{range $index, $method := .UsedMethods}}
    async def {{$method.Name | snakecase}}(self{{- range $index, $arg := $method.Args}}, {{$arg.Name | snakecase}}: {{$arg | python}}{{end}}) -> {{$method.Return | python}}:
        """
        {{$method.Comment}}
        """
        response = await self.__request('POST', self.__url, json={
            "jsonrpc": "2.0",
            "method": "{{$.Generator.Qual $method}}",
            "id": self.__next_id(),
            "params": [{{- range $index, $arg := $method.Args}}{{to_json .  ($arg.Name | snakecase)}}, {{end}}]
        })
        assert response.status // 100 == 2, str(response.status) + " " + str(response.reason)
        payload = await response.json()
        if 'error' in payload:
            raise {{$.Service.Name}}Error.from_json('{{$method.Name | snakecase}}', payload['error'])
        return {{from_json $method.Return "payload['result']"}}
{{end}}