import requests
{{with definitions}}
from dataclasses import dataclass
{{- end}}
# imports
{{range definitions}}

@dataclass
class {{.TypeName}}:
{{- range .StructFields}}
    {{.Name | snakecase}}: '{{. | python}}'
{{- end}}

    def to_json(self) -> dict:
        return {
    {{- range .StructFields}}
            "{{.Tag}}": {{to_json . (print "self." (.Name | snakecase) )}},
    {{- end}}
        }

    @staticmethod
    def from_json(payload: dict) -> '{{.TypeName}}':
        return {{.TypeName}}(
{{- range .StructFields}}
                {{.Name | snakecase}}={{from_json . (print "payload['" .Tag "']" )}},
{{- end}}
        )
{{end}}

class {{.Service.Name}}Client:
    """
    {{.Service.Comment}}
    """

    def __init__(self, base_url: str = '{{.DocAddr}}'):
        self.__url = base_url
        self.__id = 1

    def __next_id(self):
        self.__id += 1
        return self.__id
{{range $index, $method := .UsedMethods}}
    def {{$method.Name | snakecase}}(self{{- range $index, $arg := $method.Args}}, {{$arg.Name | snakecase}}: {{$arg | python}}{{end}}) -> {{$method.Return | python}}:
        """
        {{$method.Comment}}
        """
        response = requests.post(self.__url, json={
            "jsonrpc": "2.0",
            "method": "{{$.Generator.Qual $method}}",
            "id": self.__next_id(),
            "params": [{{- range $index, $arg := $method.Args}}{{to_json .  ($arg.Name | snakecase)}}, {{end}}]
            })
        assert response.ok
        payload = response.json()
        assert 'error' not in payload, Exception(payload['error'])
        return {{from_json $method.Return "payload['result']"}}
{{end}}