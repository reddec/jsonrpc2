// Code generated by go-bindata.
// sources:
// template.gotemplate
// python.gotemplate
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xdb\x6a\xdc\x30\x10\x7d\xd7\x57\x1c\xbc\x86\xb4\x4b\xec\x5e\x1e\x4d\x02\x5d\x92\xde\x20\x6d\x7a\x7d\x0a\x01\x2b\xb6\xd6\xab\xd6\x96\x8c\xa4\x6d\x1a\x24\xfd\x7b\x19\x5f\xb6\xbb\x29\x09\xd4\x2f\x96\x8e\xe6\xcc\x9c\x39\x33\x0b\x78\x9f\x7f\x15\xe6\x97\xac\x44\xfe\x91\x77\x22\x46\xc6\xf6\xa0\x33\xdd\x75\x42\xb9\x11\x35\x5c\x35\x02\xa9\x54\xb5\xf8\x7d\x8c\xb4\x13\x6e\xa3\x6b\x14\xa7\xc8\xbf\x5b\x51\x7f\x18\xae\x36\x46\xb6\xc4\x95\xf7\x69\xfe\x56\x28\x61\xb8\xd3\x26\xff\xbc\xe5\xed\x1c\x1f\xe3\xf5\x93\xc5\xc3\xcf\x08\x68\xf5\xad\x30\x08\x30\xa2\x6f\x79\x25\x90\xe4\x09\x92\x04\x01\x56\xf1\x9f\xa2\xe2\x56\xc4\xf8\x14\x19\xbc\x9f\x38\xb3\x4a\x04\xac\xa5\xb1\xee\x42\x2a\xea\xc3\xfb\x0c\x42\xd5\xff\xa7\x9d\x2d\xc8\x92\x87\xc5\x53\xae\x7b\x65\x09\x5c\x62\x4c\x51\xa0\x7c\x8c\x5d\xb2\x25\xbe\x08\xb7\x35\xca\x8e\x91\x53\xa6\x11\xfb\x76\xd7\x0b\x8a\xf1\xfe\x56\xba\xcd\xcc\xca\x57\xa6\x19\x5d\x5d\x99\x66\x4b\x05\x6d\xc1\x58\xc0\x27\x6d\xa5\x93\x5a\x21\x80\x06\x87\x00\xe2\x23\xb0\x90\xed\xbe\x70\xf8\x1b\x2c\xb9\xe7\x04\x37\xcd\x60\x43\x8c\x2c\x50\xe7\x03\x1e\x23\x86\x0b\x37\xcd\xb4\x15\x08\x83\x5e\x02\x2e\x7b\x1b\xe3\x74\x9e\x24\x23\xec\xb9\xed\xfd\xfc\xcf\x20\xd7\x48\xf3\x73\x5d\xad\xea\xda\xc4\xc8\xca\xb2\xbc\xe1\x76\xc3\xaa\xad\x69\x91\xbd\xc3\xd1\x99\x56\x4e\x28\x97\x51\x9e\x02\xbc\xef\x5b\x59\x71\xea\xea\xd9\x0f\xab\xd5\x11\xb2\xac\xe6\x8e\x67\x37\x52\x71\x73\x87\x57\x19\x12\xb2\x77\x97\x30\xc1\xc9\xc9\xeb\xcb\x37\xcc\x33\x00\x48\x88\x63\xfa\x2a\x41\x81\xe4\x65\xfe\x3c\x39\x1e\x61\x59\x13\xf2\x62\xba\x8d\xae\x0e\x31\x8f\x8d\x6a\x26\xf7\xdc\xf0\xce\x52\xf8\xd5\x35\x8b\x8c\xaa\x95\x65\x79\xb8\x5c\xff\x98\xda\xea\x8a\xb7\xc3\x38\x8a\xd3\xdd\x1c\x2f\x66\xd0\x22\xcd\xdf\x77\xbd\x36\xb4\x3a\x8b\x71\xe1\x76\x8c\xc9\x52\x2a\xd2\x68\xe6\x28\xc7\xc1\xf3\xb9\x58\x4b\x35\x0c\x7e\x0c\xda\x57\xf2\xf7\xfc\x27\x00\x00\xff\xff\x99\x91\x72\xb9\xd8\x03\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 984, mode: os.FileMode(420), modTime: time.Unix(1584623546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pythonGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xa3\xa8\x52\x5a\x11\x2c\xe0\x58\x29\x87\x15\x20\x4e\x20\x21\xc4\x69\x55\x45\x26\x9e\x2d\x86\xc4\x0e\x33\x0e\x2a\xb2\xfc\xdf\x91\x5d\x27\xdb\xa4\x97\xed\xa5\xb1\xdf\x7b\x33\xf6\xe7\xd1\xc3\x68\xc9\x01\xe1\x9f\x09\xd9\x71\x51\x74\xbd\x64\x06\xef\xc5\x37\xa4\xbf\xba\x43\xf1\x45\x0e\x18\xc2\xb1\x00\x00\x28\xcb\x32\xfd\xdf\xc8\xef\xed\x30\xa0\x71\x21\x2c\x86\xf4\xa1\xf0\x09\xda\x56\x1b\xed\xda\x76\xcf\xd8\x3f\xd5\xf0\x43\x32\xb6\x13\xf5\xd0\x40\xe5\xbd\xf8\x60\xbb\x07\xa5\x28\x84\xea\x70\x2d\x1e\x7f\xd1\x29\xda\xec\x9a\x03\x5b\x55\x2b\x68\xe0\xed\x6d\x1f\x83\x17\xd7\x6a\x95\x1a\xdd\x57\xd3\x0a\x5e\xc5\xc0\xbc\x4d\xe8\x26\x32\xcf\x6a\x51\x78\x4f\xd2\x9c\x11\x76\xda\x28\xbc\xd4\xb0\x1b\xd0\xfd\xb4\x0a\x8e\x0d\x88\xef\x8c\xea\x73\x5a\x72\xbe\x64\xec\xe9\x7d\xf6\x64\x3e\xa9\xb5\xf7\xaf\x61\x53\x48\xd2\x39\x56\x99\xcd\x0f\x74\xe6\x10\xea\x18\x97\x74\xce\x59\xef\xd1\xa8\x10\x6e\x0e\x3e\x73\xbe\xb2\x9e\xc3\x6b\xd4\x5b\x1f\x21\x8f\xd6\x30\x42\xb3\xbc\xa6\x18\x2d\xbb\xfd\x33\xd3\x1a\x7e\xb1\x35\x8d\x5f\x32\xa9\x46\xdc\xa3\xb1\x2b\xe1\x08\xe5\x3b\xf1\xa6\xac\xd7\xf2\xb5\x79\x52\xbd\xdf\x89\x4f\x68\x90\xa4\xb3\x24\xbe\x4e\xb2\x9f\x2f\x16\xc2\x36\xa6\x53\x24\xf7\x9e\xdf\xe7\xb0\x31\x8d\x92\xe4\xc0\xd1\xf8\xf8\x52\x76\x2b\x72\x11\x64\x62\x77\x5a\xd5\x0d\x87\x65\x29\x99\x31\xcd\xf7\x15\x8e\xb0\xbf\x17\x69\x94\xff\x7a\x2b\x55\xe2\x95\xd5\x88\x62\x7f\x17\xae\x90\xc8\x52\x05\xc6\x3a\xd0\x66\xce\xd5\xf0\xf1\xd2\xe1\xe8\xb4\x35\xfb\xbc\xf5\x98\x9d\xa7\xc3\x76\xd6\x16\x03\x21\x4f\xbd\xab\x4e\x71\xe6\xd2\xc9\xff\x07\x00\x00\xff\xff\x21\x46\x5d\x4b\x81\x03\x00\x00")

func pythonGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_pythonGotemplate,
		"python.gotemplate",
	)
}

func pythonGotemplate() (*asset, error) {
	bytes, err := pythonGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "python.gotemplate", size: 897, mode: os.FileMode(420), modTime: time.Unix(1581586275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate": templateGotemplate,
	"python.gotemplate":   pythonGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"python.gotemplate":   &bintree{pythonGotemplate, map[string]*bintree{}},
	"template.gotemplate": &bintree{templateGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
