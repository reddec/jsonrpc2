// Code generated by go-bindata.
// sources:
// template.gotemplate
// python.gotemplate
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xdd\x6a\xdc\x3c\x10\xbd\xd7\x53\x1c\xbc\x86\xc0\x12\xeb\xfb\xda\x4b\x93\x40\x97\xa4\x7f\xd0\x36\xfd\xbd\x2a\x05\x2b\xb6\xe2\x55\xb1\x25\x23\x69\xdb\x06\x59\xef\x5e\x46\xb2\xb7\x9b\x52\xe2\x1b\x69\x8e\xe7\x9c\x99\x39\xa3\x0d\x42\xe0\x9f\xa4\xfd\xa1\x5a\xc9\xdf\x89\x51\xc6\xc8\xd8\x09\x74\x65\xc6\x51\x6a\x1f\x23\x0b\xc1\x0a\xdd\x4b\x94\x4a\x77\xf2\xd7\x39\xca\x51\xfa\xbd\xe9\x50\x5f\x82\x7f\x71\xb2\x7b\x9b\x42\x47\xfc\x0d\xa9\x96\xfc\xa5\xd4\xd2\x0a\x6f\x2c\xff\x70\x10\xc3\x4a\xc8\x05\x96\xe0\x44\x9f\x6d\x91\x25\x6a\x34\x8f\xb1\x1b\xb6\xc5\x47\xe9\x0f\x56\xbb\x9c\xb9\x28\x65\xec\xf3\xfd\x24\x29\x27\x84\x9f\xca\xef\x57\x16\xdf\xd9\x9e\x3a\xdb\x62\x67\xfb\x03\x15\x74\x35\x63\x33\xde\x1b\xa7\xbc\x32\x1a\x33\x68\x76\xcc\x20\x3e\x66\x36\x57\xc7\x6f\x7e\x78\xb0\x10\x2a\xfc\xe5\x84\xb0\x7d\xb2\x21\x46\x36\xd3\xe4\x09\x8f\x11\x29\x10\xb6\x5f\x8c\xc5\x9c\xfa\x25\xe0\x66\x72\x31\x2e\xf7\xa5\x65\x64\x69\xa9\xbb\x64\xf6\x7a\x56\x50\x77\x28\xf9\xb5\x69\x77\x5d\x67\x63\x64\x4d\xd3\xdc\x0a\xb7\x67\xed\xc1\x0e\xa8\x5e\xe1\xec\xca\x68\x2f\xb5\xaf\x48\xa7\x86\x98\xa6\x41\xb5\x82\xa6\xfa\xef\xbb\x33\xfa\x0c\x55\xd5\x09\x2f\xaa\x5b\xa5\x85\xbd\xc7\xb3\x0a\x05\xd9\x7b\x14\x2c\x70\x71\xf1\xfc\xe6\x05\x0b\x0c\x00\x0a\xe2\xd8\xa9\x2d\x50\xa3\x78\xca\xff\x2f\xce\x33\xac\x3a\x42\x9e\x2c\x51\x76\x35\xe5\x3c\xb6\xaa\x95\x3c\x09\x2b\x46\x47\xe9\x5f\xbf\xb1\xc8\xa8\x5a\xd3\x34\x27\xe3\xfe\xcb\xd4\xc1\xb4\x62\x48\xeb\xa8\x2f\x8f\x7b\x7c\xb3\x82\x0e\x25\x7f\x3d\x4e\xc6\xd2\xd3\xd9\xe4\x07\x77\x64\x2c\x96\x52\x91\xde\x30\x4f\x1a\x0f\x7e\x5f\xcb\x3b\xa5\xd3\xe2\x73\xd2\x69\x27\x7f\xee\xbf\x03\x00\x00\xff\xff\xed\x5e\x2b\xbf\x1b\x03\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 795, mode: os.FileMode(420), modTime: time.Unix(1583225017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pythonGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xa3\xa8\x52\x5a\x11\x2c\xe0\x58\x29\x87\x15\x20\x4e\x20\x21\xc4\x69\x55\x45\x26\x9e\x2d\x86\xc4\x0e\x33\x0e\x2a\xb2\xfc\xdf\x91\x5d\x27\xdb\xa4\x97\xed\xa5\xb1\xdf\x7b\x33\xf6\xe7\xd1\xc3\x68\xc9\x01\xe1\x9f\x09\xd9\x71\x51\x74\xbd\x64\x06\xef\xc5\x37\xa4\xbf\xba\x43\xf1\x45\x0e\x18\xc2\xb1\x00\x00\x28\xcb\x32\xfd\xdf\xc8\xef\xed\x30\xa0\x71\x21\x2c\x86\xf4\xa1\xf0\x09\xda\x56\x1b\xed\xda\x76\xcf\xd8\x3f\xd5\xf0\x43\x32\xb6\x13\xf5\xd0\x40\xe5\xbd\xf8\x60\xbb\x07\xa5\x28\x84\xea\x70\x2d\x1e\x7f\xd1\x29\xda\xec\x9a\x03\x5b\x55\x2b\x68\xe0\xed\x6d\x1f\x83\x17\xd7\x6a\x95\x1a\xdd\x57\xd3\x0a\x5e\xc5\xc0\xbc\x4d\xe8\x26\x32\xcf\x6a\x51\x78\x4f\xd2\x9c\x11\x76\xda\x28\xbc\xd4\xb0\x1b\xd0\xfd\xb4\x0a\x8e\x0d\x88\xef\x8c\xea\x73\x5a\x72\xbe\x64\xec\xe9\x7d\xf6\x64\x3e\xa9\xb5\xf7\xaf\x61\x53\x48\xd2\x39\x56\x99\xcd\x0f\x74\xe6\x10\xea\x18\x97\x74\xce\x59\xef\xd1\xa8\x10\x6e\x0e\x3e\x73\xbe\xb2\x9e\xc3\x6b\xd4\x5b\x1f\x21\x8f\xd6\x30\x42\xb3\xbc\xa6\x18\x2d\xbb\xfd\x33\xd3\x1a\x7e\xb1\x35\x8d\x5f\x32\xa9\x46\xdc\xa3\xb1\x2b\xe1\x08\xe5\x3b\xf1\xa6\xac\xd7\xf2\xb5\x79\x52\xbd\xdf\x89\x4f\x68\x90\xa4\xb3\x24\xbe\x4e\xb2\x9f\x2f\x16\xc2\x36\xa6\x53\x24\xf7\x9e\xdf\xe7\xb0\x31\x8d\x92\xe4\xc0\xd1\xf8\xf8\x52\x76\x2b\x72\x11\x64\x62\x77\x5a\xd5\x0d\x87\x65\x29\x99\x31\xcd\xf7\x15\x8e\xb0\xbf\x17\x69\x94\xff\x7a\x2b\x55\xe2\x95\xd5\x88\x62\x7f\x17\xae\x90\xc8\x52\x05\xc6\x3a\xd0\x66\xce\xd5\xf0\xf1\xd2\xe1\xe8\xb4\x35\xfb\xbc\xf5\x98\x9d\xa7\xc3\x76\xd6\x16\x03\x21\x4f\xbd\xab\x4e\x71\xe6\xd2\xc9\xff\x07\x00\x00\xff\xff\x21\x46\x5d\x4b\x81\x03\x00\x00")

func pythonGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_pythonGotemplate,
		"python.gotemplate",
	)
}

func pythonGotemplate() (*asset, error) {
	bytes, err := pythonGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "python.gotemplate", size: 897, mode: os.FileMode(420), modTime: time.Unix(1581586275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate": templateGotemplate,
	"python.gotemplate":   pythonGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"python.gotemplate":   &bintree{pythonGotemplate, map[string]*bintree{}},
	"template.gotemplate": &bintree{templateGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
