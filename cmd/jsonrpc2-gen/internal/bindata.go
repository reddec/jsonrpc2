// Code generated by go-bindata.
// sources:
// template.gotemplate
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xdb\x6a\xdc\x30\x10\x7d\xd7\x57\x1c\xbc\x86\xc0\x12\xab\x97\x47\x93\x40\x97\xa4\x37\xe8\xfd\xf2\x54\x0a\x56\x6c\xc5\xab\x62\x4b\x46\xd2\xb6\x0d\xb2\xfe\xbd\x8c\x64\x6f\x37\xa5\xc4\x2f\xf2\x1c\xcd\x39\x33\x73\x46\x1b\x84\xc0\x3f\x4b\xfb\x53\xb5\x92\xbf\x13\xa3\x8c\x91\xb1\x13\xe8\xca\x8c\xa3\xd4\x3e\x46\x16\x82\x15\xba\x97\x28\x95\xee\xe4\xef\x73\x94\xa3\xf4\x7b\xd3\xa1\xbe\x04\xff\xea\x64\xf7\x36\x85\x8e\xf8\x1b\x52\x2d\xf9\x4b\xa9\xa5\x15\xde\x58\xfe\xf1\x20\x86\x95\x90\x0b\x2c\xc1\x89\x3e\xdb\x22\x4b\xd4\x68\x1e\x62\x37\x6c\x8b\x4f\xd2\x1f\xac\x76\x39\x73\x51\xca\xd8\x97\xbb\x49\x52\x4e\x08\xbf\x94\xdf\xaf\x2c\xbe\xb3\x3d\x75\xb6\xc5\xce\xf6\x07\x2a\xe8\x6a\xc6\x66\x7c\x30\x4e\x79\x65\x34\x66\xd0\xec\x98\x41\x7c\xcc\x6c\xae\x8e\xdf\x7c\xff\x60\x21\x54\xf8\xc7\x09\x61\xfb\x64\x43\x8c\x6c\xa6\xc9\x13\x1e\x23\x52\x20\x6c\xbf\x18\x8b\x39\xf5\x4b\xc0\xd2\x26\xb2\x9c\xd4\x5d\x32\x78\x3d\x2b\xa8\x5b\x94\xfc\xda\xb4\xbb\xae\xb3\x31\xb2\xa6\x69\x6e\x84\xdb\xb3\xf6\x60\x07\x54\xaf\x70\x76\x65\xb4\x97\xda\x57\xa4\x53\x43\x4c\xd3\xa0\x5a\x41\x93\x3c\xfa\xe1\x8c\x3e\x43\x55\x75\xc2\x8b\xea\x46\x69\x61\xef\xf0\xac\x42\x41\x96\x1e\x05\x0b\x5c\x5c\x3c\x7f\xff\x82\x05\x06\x00\x05\x71\xec\xd4\x16\xa8\x51\x3c\xe5\x8f\x8b\xf3\x0c\xab\x8e\x90\x27\x4b\x94\x9d\x4c\x39\x0f\xad\x67\x25\x4f\xc2\x8a\xd1\x51\xfa\xb7\xef\x2c\x32\xaa\xd6\x34\xcd\xc9\xb8\xff\x33\x72\x30\xad\x18\xd2\x0a\xea\xcb\xe3\xee\xde\xac\xa0\x43\xc9\x5f\x8f\x93\xb1\xf4\x5c\x36\xf9\x91\x1d\x19\x8b\xa5\x54\xa4\x37\xcc\x93\xc6\xbd\xeb\x6b\x79\xab\x74\x5a\x76\x4e\x3a\xed\xe4\xef\xff\x9f\x00\x00\x00\xff\xff\xed\xc8\x16\x3f\x0f\x03\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 783, mode: os.FileMode(420), modTime: time.Unix(1581518949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate": templateGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.gotemplate": &bintree{templateGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
