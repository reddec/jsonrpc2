// Code generated by go-bindata.
// sources:
// template.gotemplate
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x4d\x6b\xdc\x30\x10\xbd\xcf\xaf\x78\x38\x0b\x81\x25\x72\x3f\x8e\x26\x85\x2e\xe9\xd7\xa5\xdf\xed\xa9\x14\xa4\x58\xaa\x57\x65\x2d\x19\x49\xdb\x36\x48\xfa\xef\x65\x6c\x6f\x48\x72\x88\x2f\xe3\x79\xcc\x7b\x33\xef\xe9\x0c\x39\xb7\x5f\x4d\xf8\x63\x7b\xd3\x7e\x50\xa3\xa9\x95\xe8\x0e\x74\xe5\xc7\xd1\xb8\x54\x2b\xe5\x1c\x94\x1b\x0c\x36\xd6\x69\xf3\xef\x02\x9b\xd1\xa4\xbd\xd7\xe8\x5e\xa0\xfd\x1e\x8d\x7e\x3f\xb7\x91\xf9\x67\xac\xba\x69\xdf\x1a\x67\x82\x4a\x3e\xb4\x9f\x8f\xea\x70\x22\x2c\x0b\xd6\xe6\x8e\x3e\x6d\xb1\x48\x74\x90\x8f\xb1\x25\x6d\xf1\xc5\xa4\x63\x70\x71\x99\x5c\x95\x16\xec\xdb\xcd\x64\x78\x26\xe7\xbf\x36\xed\x4f\xac\x76\x17\x06\xbe\x6c\x8b\x5d\x18\x8e\xbc\x30\x76\x44\x05\x9f\x7c\xb4\xc9\x7a\x87\x02\xf6\x8e\x02\xe6\xa3\x50\x11\xb7\x5f\xb9\x5f\x28\x67\x81\x07\x49\xa8\x30\xcc\x31\xd4\x4a\x85\x9d\xcf\x78\xad\x98\x1b\x15\x86\x35\x58\x94\xf9\x5e\x06\xd6\x33\xb1\xc8\x19\xa7\xe7\x80\x4f\x55\xc0\xfe\xc2\xa6\x7d\xe5\xfb\x9d\xd6\xa1\x56\x92\x52\x5e\xab\xb8\xa7\xfe\x18\x0e\x10\xef\x70\x7e\xe5\x5d\x32\x2e\x09\xd6\xe9\xa0\xa6\xe9\x60\x7b\xc5\x4e\x9e\xfc\x8e\xde\x9d\x43\x08\xad\x92\x12\xd7\xd6\xa9\x70\x83\x97\x02\x0d\x47\x7a\x2b\xd8\xe0\xf2\xf2\xf5\xc7\x37\x94\x09\x00\x1a\xe6\x84\xa9\x6f\xd0\xa1\x79\xde\x3e\x6d\x2e\x16\xd8\x6a\x46\x9e\xad\xdd\x92\xe4\x3c\xf3\xd8\xf3\x9c\xc8\x93\x0a\x6a\x8c\x3c\xfe\xe3\x27\x55\xe2\x6d\x52\xca\x7b\x76\xd7\xbf\xff\x01\x00\x00\xff\xff\xe0\xd0\x6b\x11\x83\x02\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 643, mode: os.FileMode(420), modTime: time.Unix(1580800321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate": templateGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.gotemplate": &bintree{templateGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
