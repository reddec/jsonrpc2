// Code generated by go-bindata.
// sources:
// template.gotemplate
// python.gotemplate
// js.gotemplate
// ts.gotemplate
// method_doc.gotemplate
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x5d\x4f\xdc\x30\x10\x7c\xf7\xaf\x18\xe5\x4e\xa2\x45\x24\xfd\x78\x3c\x81\x54\x04\xa5\xa5\xa2\xa5\x2d\xf4\x09\x21\xc5\x24\x26\xe7\x36\xe7\x44\xb6\xaf\x14\xd9\xfe\xef\xd5\xda\xc9\x1d\x77\x05\xa4\xe6\x25\xf6\x78\x67\xbd\x3b\xb3\x9e\xc0\xb9\xe2\x42\xe8\xdf\xb2\x12\xc5\x17\xbe\x10\x21\x30\xf6\x00\x3a\xea\x16\x0b\xa1\x6c\x42\x35\x57\x8d\xc0\x54\xaa\x5a\xfc\xd9\xc3\x74\x21\xec\xbc\xab\x31\x3b\x40\xf1\xc3\x88\xfa\x73\xdc\x9a\x10\xd8\x2e\xae\x9c\x9b\x16\x1f\x84\x12\x9a\xdb\x4e\x17\xdf\x96\xbc\x1d\xe3\x43\xb8\x7e\x31\x79\xfa\x18\x1e\x6d\x77\x27\x34\x3c\xb4\xe8\x5b\x5e\x09\x64\x45\x86\x2c\x83\x87\x51\xfc\x97\xa8\xb8\x11\x21\xbc\x44\x0e\xe7\x06\xce\x58\x25\x3c\x6e\xa5\x36\xf6\x4c\x2a\xea\xc3\xb9\x1c\x42\xd5\xff\x57\x3b\x9b\x90\x24\x4f\x17\x4f\xb9\xb6\xae\x25\x70\x17\x29\xc5\x0c\xe5\x73\xec\x92\xed\xe2\xbb\xb0\x4b\xad\x4c\x8a\x1c\x32\x25\xec\xf2\xbe\x17\x14\xe3\xdc\x9d\xb4\xf3\x91\x55\x1c\xea\x26\xa9\x7a\xa8\x9b\x25\x5d\x68\x66\x8c\x79\x7c\xed\x8c\xb4\xb2\x53\xf0\x20\xe3\xe0\x41\x7c\x78\xe6\xf3\xd5\xe7\x37\x7f\x51\x92\x2d\x25\xb8\x6e\xa2\x0c\x21\x30\x4f\x9d\x47\x3c\x04\xc4\x0d\xd7\xcd\x30\x15\xf0\xb1\x5e\x02\xce\x7b\x13\xc2\xb0\x1e\x4a\x86\x7f\xa0\xb6\x73\xe3\x3f\x87\xbc\xc5\xb4\x38\xee\xaa\xc3\xba\xd6\x21\xb0\xb2\x2c\x6f\xb8\x99\xb3\x6a\xa9\x5b\xe4\x1f\xb1\x73\xd4\x29\x2b\x94\xcd\x29\xcf\x0c\xbc\xef\x5b\x59\x71\xea\xea\xd5\x4f\xd3\xa9\x1d\xe4\x79\xcd\x2d\xcf\x6f\xa4\xe2\xfa\x1e\xef\x72\x64\x24\xef\x2a\x61\x86\xfd\xfd\xf7\xe7\x27\xcc\x31\x00\xc8\x88\xa3\xfb\x2a\xc3\x0c\xd9\xdb\xe2\x75\xb6\x97\x60\x59\x13\xf2\x66\xd8\x25\x55\x63\xcc\x73\x56\x8d\xe4\x9e\x6b\xbe\x30\x14\x7e\x75\xcd\x02\xa3\xdb\xca\xb2\xdc\x1c\xae\x7f\x44\x6d\xbb\x8a\xb7\xd1\x8e\xd9\xc1\xca\xc7\xb3\x11\x34\x98\x16\xa7\x8b\xbe\xd3\x34\x3a\x93\x34\x70\x2b\xc6\x20\x29\x73\x8e\xb4\x5b\xc3\xa7\xe6\xc2\xea\x65\x65\xa3\x4f\x9f\x4c\xf4\x3d\x19\x8e\xd5\xf8\x33\xff\x98\xed\xdb\xce\xaf\x73\xa6\x8c\x27\x52\xb4\x71\xf6\xc9\xf2\xe2\x92\x37\xa3\xdb\x6b\x77\xe9\xe0\x91\x47\x06\x8a\xdc\x70\x3e\x87\x68\xe9\x7d\x92\x46\x4d\xc7\x2c\x15\xb8\xd1\xdd\xb1\xb8\x95\x2a\xce\x6d\x0a\xda\x66\x27\x49\xd7\xeb\xbf\x01\x00\x00\xff\xff\x1d\x67\xdc\x81\xa1\x04\x00\x00")

func templateGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_templateGotemplate,
		"template.gotemplate",
	)
}

func templateGotemplate() (*asset, error) {
	bytes, err := templateGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.gotemplate", size: 1185, mode: os.FileMode(420), modTime: time.Unix(1584625238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pythonGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xa3\xa8\x52\x5a\x11\x2c\xe0\x58\x29\x87\x15\x20\x4e\x20\x21\xc4\x69\x55\x45\x26\x9e\x2d\x86\xc4\x0e\x33\x0e\x2a\xb2\xfc\xdf\x91\x5d\x27\xdb\xa4\x97\xed\xa5\xb1\xdf\x7b\x33\xf6\xe7\xd1\xc3\x68\xc9\x01\xe1\x9f\x09\xd9\x71\x51\x74\xbd\x64\x06\xef\xc5\x37\xa4\xbf\xba\x43\xf1\x45\x0e\x18\xc2\xb1\x00\x00\x28\xcb\x32\xfd\xdf\xc8\xef\xed\x30\xa0\x71\x21\x2c\x86\xf4\xa1\xf0\x09\xda\x56\x1b\xed\xda\x76\xcf\xd8\x3f\xd5\xf0\x43\x32\xb6\x13\xf5\xd0\x40\xe5\xbd\xf8\x60\xbb\x07\xa5\x28\x84\xea\x70\x2d\x1e\x7f\xd1\x29\xda\xec\x9a\x03\x5b\x55\x2b\x68\xe0\xed\x6d\x1f\x83\x17\xd7\x6a\x95\x1a\xdd\x57\xd3\x0a\x5e\xc5\xc0\xbc\x4d\xe8\x26\x32\xcf\x6a\x51\x78\x4f\xd2\x9c\x11\x76\xda\x28\xbc\xd4\xb0\x1b\xd0\xfd\xb4\x0a\x8e\x0d\x88\xef\x8c\xea\x73\x5a\x72\xbe\x64\xec\xe9\x7d\xf6\x64\x3e\xa9\xb5\xf7\xaf\x61\x53\x48\xd2\x39\x56\x99\xcd\x0f\x74\xe6\x10\xea\x18\x97\x74\xce\x59\xef\xd1\xa8\x10\x6e\x0e\x3e\x73\xbe\xb2\x9e\xc3\x6b\xd4\x5b\x1f\x21\x8f\xd6\x30\x42\xb3\xbc\xa6\x18\x2d\xbb\xfd\x33\xd3\x1a\x7e\xb1\x35\x8d\x5f\x32\xa9\x46\xdc\xa3\xb1\x2b\xe1\x08\xe5\x3b\xf1\xa6\xac\xd7\xf2\xb5\x79\x52\xbd\xdf\x89\x4f\x68\x90\xa4\xb3\x24\xbe\x4e\xb2\x9f\x2f\x16\xc2\x36\xa6\x53\x24\xf7\x9e\xdf\xe7\xb0\x31\x8d\x92\xe4\xc0\xd1\xf8\xf8\x52\x76\x2b\x72\x11\x64\x62\x77\x5a\xd5\x0d\x87\x65\x29\x99\x31\xcd\xf7\x15\x8e\xb0\xbf\x17\x69\x94\xff\x7a\x2b\x55\xe2\x95\xd5\x88\x62\x7f\x17\xae\x90\xc8\x52\x05\xc6\x3a\xd0\x66\xce\xd5\xf0\xf1\xd2\xe1\xe8\xb4\x35\xfb\xbc\xf5\x98\x9d\xa7\xc3\x76\xd6\x16\x03\x21\x4f\xbd\xab\x4e\x71\xe6\xd2\xc9\xff\x07\x00\x00\xff\xff\x21\x46\x5d\x4b\x81\x03\x00\x00")

func pythonGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_pythonGotemplate,
		"python.gotemplate",
	)
}

func pythonGotemplate() (*asset, error) {
	bytes, err := pythonGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "python.gotemplate", size: 897, mode: os.FileMode(420), modTime: time.Unix(1581586275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x1a\x01\x24\x39\x8e\x9c\xdd\xa3\x03\x1f\x82\xec\x62\x3f\x80\x4d\x5c\x24\x3d\x15\x45\xc0\x88\x63\x9b\xad\x4c\xaa\x43\x2a\xb1\xa1\xf2\xbf\x17\xa4\x28\xeb\xc3\x4e\x6f\xd5\x45\x10\xe7\xbd\x99\xa7\xc7\xe1\x10\xf7\xa5\x22\x03\x79\xc1\xb4\x86\xba\xce\x1e\x91\x5e\x45\x8e\xd9\x3d\xdb\xa1\xb5\x7f\x11\x29\x02\xdc\x1b\x94\x5c\x43\xf3\x55\x47\x00\x00\xb9\x92\xda\x50\x95\x1b\x45\xc9\x0e\xb5\x66\x1b\x9c\x41\xae\x38\xce\x80\xa3\x61\xa2\xd0\x69\x40\xba\x47\x57\x25\x52\xe2\xc2\x70\x09\xf1\x02\x62\xb8\x84\xc0\x4a\x6f\x8e\x28\xb3\x15\x3a\xf3\xa0\xa5\x4f\x35\x8a\x84\xbc\xb0\x6c\x2b\x34\x71\x1b\xd9\x28\xfa\xf9\x6f\x04\x25\xf3\xe9\xd4\xbf\x7b\xf1\x3b\xb5\xdb\xa1\x34\xd6\xfa\xc0\x74\x3a\x8f\x1a\xe4\x1c\xee\x08\x99\x41\x90\xf8\x06\xb7\xab\x7f\x61\xcb\x24\x2f\x90\xc0\xa8\xd3\xf4\x59\xcb\x29\x09\xd7\x85\xd8\x6c\xcd\x3f\x01\x9d\x88\x35\x70\x5c\x0b\x89\x3c\x85\x9c\x49\x20\x34\x15\x49\x28\x49\xed\x84\xc6\x13\x27\x5f\x98\xc6\xe7\x8a\x0a\x58\x42\x5c\xd7\xd9\x9f\x2a\xbf\xe5\x9c\xac\x8d\x67\xa7\xb9\x97\x20\xab\xa2\xe8\xbb\xec\x5d\x7a\x0e\xfc\x36\xd5\xcd\x38\x2c\x38\x2c\xe1\xf7\x93\xe5\x33\xf9\xc7\x4b\xad\xdf\x51\x5d\x13\x93\x1b\x84\x0b\x21\x39\xee\x67\x70\xb1\x43\xb3\x55\x1c\x16\x4b\xc8\x3e\x6a\xe4\xff\xfb\x4f\x1d\x5c\xed\x6c\x0f\xb8\x33\xae\xbb\x37\xd3\x07\x99\xf7\x50\xce\x5c\xf8\x0e\x95\x34\xc2\x14\x68\x6d\x52\xd7\x57\x30\x2a\xcc\x68\xe3\xaa\xb6\x94\x5b\xda\x68\x6b\xeb\x5a\xac\x61\x63\x02\x0a\xae\xad\x9d\x41\x5d\xa3\xe4\x2e\xe4\x28\x61\xdf\xc2\x5a\xda\x39\x18\xb6\x27\x61\x6f\x4c\x98\xd6\x99\x9c\x15\x45\x12\x0f\x75\xf9\x2d\xe9\x78\xee\x99\x7c\xd1\x4a\x52\x99\x4f\x60\x01\x93\x3f\xb2\xeb\xc9\x6c\x18\x6e\xd8\x3e\x5a\xd7\x17\xd9\xdf\x28\x91\x98\x51\x94\x7d\xa8\x58\xd1\xfe\x81\xb5\x63\x9a\xf0\x94\x20\x45\xe2\xde\x3c\x0b\x9e\xa4\x23\x50\xc9\x88\xed\xb4\x03\x7e\xfa\x45\x26\x7d\x3e\x16\xb4\x69\xda\x36\x42\x88\x45\xcd\xa1\xe9\xc9\x3b\x6d\x4a\xc1\xe1\x72\xd0\x76\xc1\xea\x63\xb8\xed\xad\xae\x13\x82\xf3\x8d\xea\x19\x10\x7e\xeb\xe7\xf5\xc7\x06\xd6\x68\xf2\xed\xca\xff\x3d\x2c\x47\x1b\xd2\x10\x17\x30\x59\x3d\x3c\x3e\x8d\x6c\xdd\x22\xe3\x48\x7a\x31\xa2\xb8\x27\xbe\x53\xd2\xa0\x34\x57\x4f\x87\x12\x63\x58\x40\xcc\xca\xb2\x10\x39\x33\x42\xc9\xb9\xdb\xe4\x78\x98\xcb\x0e\x3f\x5f\x14\x3f\x2c\xe0\xbf\xc7\x87\xfb\x4c\x1b\x12\x72\x23\xd6\x87\xc4\x89\xef\x1c\xec\x5c\x10\x6b\x48\xde\x39\x80\xe9\x48\x5b\xd3\x93\xab\x66\x72\x64\x84\x5a\x15\xaf\xf8\x1e\xf9\xe8\x5a\xcf\xa0\xb4\x37\x6a\xed\xc8\x47\x42\xe7\x5f\x53\xc2\x53\x92\x6e\x98\x0c\x93\x0c\xb5\xff\x46\xa8\x33\xf5\x75\xac\xd5\x6c\x49\xbd\xf9\xd9\xe9\xef\x8c\xc4\xa1\xb4\x61\xa6\xd2\x6e\xfe\xfb\xf1\xdf\x2d\x3d\xe1\xde\x0c\xa4\x8d\xb4\x71\x66\xd8\x51\x9c\xa3\xb9\x3d\x48\xd2\x9b\x68\xa0\x24\x46\x57\x29\x06\x21\x3d\xe1\x7d\x45\xe7\x2f\xb9\xc4\x91\x32\x9f\x23\x3b\xde\x67\xbd\xb5\x70\xb5\x75\x0b\xbe\xc8\x59\xd5\xa1\xb3\x3d\x96\x50\x57\x85\x39\x5e\x54\x3f\x02\x00\x00\xff\xff\xf5\x5c\xbf\xbd\x6e\x07\x00\x00")

func jsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_jsGotemplate,
		"js.gotemplate",
	)
}

func jsGotemplate() (*asset, error) {
	bytes, err := jsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js.gotemplate", size: 1902, mode: os.FileMode(420), modTime: time.Unix(1586348282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\x8d\x00\x92\x12\x47\xde\xf6\x28\xd7\x05\x82\xf4\x1b\xe8\x6e\xda\xa4\xa7\xa2\x30\x68\x71\x6c\x73\x2b\x93\xda\x21\x95\xd8\xd0\xf2\xbf\x17\xa4\x28\x59\x92\x93\xf6\xb2\xba\xd8\x22\xe7\x0d\x9f\xde\x7b\xa2\x88\xc7\x4a\x91\x81\xa2\x64\x5a\x43\xd3\x64\x8f\x48\xcf\xa2\xc0\xec\x3d\x3b\xa0\xb5\x3f\x10\x29\x02\x3c\x1a\x94\x5c\x43\x7b\xd7\x44\x00\x00\x55\xbd\x29\x45\x01\x84\x8c\x2b\x59\x9e\xa0\x50\x1c\x73\x90\xf5\x61\x83\xb4\x7c\xb5\x82\xa3\x61\xa2\xd4\x39\x30\x79\x5a\x46\xbe\xa4\x50\x52\x1b\xaa\x0b\xa3\x28\x39\xa0\xd6\x6c\x87\x39\x68\x43\x42\xee\xe6\xa3\x8e\xf3\x11\x3a\x0d\x1c\xdc\xa5\xeb\x0a\x29\x71\xb5\x70\x03\x71\x0e\x31\xdc\x40\x68\x95\x2e\xfb\x2a\xb3\x17\x3a\xf3\x45\x2b\xdf\x77\x32\x13\x9a\xc3\xaa\x5b\xa6\x9d\xb7\x91\x8d\xa2\xa6\x21\x26\x77\x08\x1c\xb7\x42\x0a\x23\x94\xd4\xd6\x46\x41\x36\x21\x0d\xd2\x96\x15\xe8\xa4\x7b\x3a\x55\xd8\xca\x16\xf8\x35\xcd\x2d\xb4\xe0\xec\xd1\x3f\xe6\x8f\x02\x4b\xee\xe0\xed\x6c\xf6\xc4\x76\xd6\xe6\xee\x1f\x7c\x06\x73\xaa\x50\x17\x24\x2a\xd3\x17\xdc\x02\x4a\x6e\x1d\x8d\xa6\x69\xff\x45\x8b\xeb\xeb\x68\x60\xd3\xbd\x3a\x1c\x50\x3a\xc4\xf5\xf5\x22\xfa\x6f\x33\xa1\x69\x55\xaf\x48\x3c\x33\x83\xb0\x5e\x0b\x3e\xb1\x2c\xcc\xf4\x9e\xad\xd7\x35\x95\x9d\x25\x6f\xd6\x54\x84\xdb\x52\xec\xf6\xe6\x67\x26\x79\x89\xd4\x59\xec\xeb\x17\x0b\xb8\x27\x74\x08\x89\x2f\x70\xf7\xf0\x0b\xec\xdb\x2a\x30\xea\x92\x63\xd6\x61\xa6\x3d\x21\x11\xdb\xd6\x03\xe4\x29\x14\x4c\x02\xa1\xa9\x49\x42\x45\xea\x20\x34\x5e\xe4\x69\xc3\x34\x3a\xf6\xd0\xd1\x87\x15\xc4\x4d\x93\x7d\xaf\x8a\x3b\xce\xc9\xda\x78\x7e\xb9\xc8\x0a\x64\x5d\x96\xc3\x7c\xf9\x7c\x78\x19\x60\x05\x5d\xcf\xe5\x74\x5a\x70\x58\xc1\xd7\x17\xc3\xaf\xf4\x9f\x0e\x75\x49\xeb\x73\x76\x25\x24\xc7\xe3\x1c\xae\x0e\x68\xf6\x8a\x43\xbe\x82\xec\x4f\x8d\xfc\x37\x7f\xdb\x85\xc7\xc5\xa0\xcd\x48\xa8\x1b\x24\xc1\x8d\xbb\x34\xb8\x5f\xa6\x4f\xb2\x18\x54\x39\x95\xe1\x33\xd4\xd2\x08\x53\xa2\xb5\xc9\x39\xa3\xfd\xc2\x8c\x76\x6e\xd5\x0e\x72\x47\x3b\x6d\x6d\xd3\x88\x2d\xec\x4c\xa8\x82\x77\xd6\xce\x21\x84\xb2\x69\x1c\x24\x18\xe8\xd2\xec\x3b\x8c\x03\x1d\x4a\xd3\x1c\x1e\x5a\xbf\xbe\x3d\x73\xfa\xa3\x35\x72\x0c\xf8\x6e\xe0\x41\x70\x3a\x61\x2f\x4c\x98\x4e\xdb\x82\x95\x65\x12\x8f\x9f\xcc\x9b\x7a\xc6\xb9\x6b\xf6\x51\x2b\x49\x55\x31\x83\x1c\x66\xdf\x64\xef\x66\xf3\xf1\x74\x8b\xf6\xb3\x4d\x73\x95\xfd\x84\x12\x89\x19\x45\xd9\xef\x35\x2b\x3b\x0d\xac\x9d\xc2\x84\x87\x04\x2a\x12\x8f\x66\x2d\x78\x92\x4e\x8a\x2a\x46\xec\xa0\x5d\xe1\x5f\x5f\x5a\xe6\x30\xf6\x77\xbf\xa0\x4d\x53\x60\x1a\xfe\x47\xd5\x2e\x6d\xfd\x76\x32\xd9\x10\xfa\x27\xb9\x7c\x03\x04\x87\x9b\x51\xc6\x83\x2b\xfd\x74\x17\xe4\x61\xc7\x36\x7e\xc1\xac\x96\xd8\x79\x83\x27\xfc\x94\x83\xda\x7c\xc4\xc2\x0c\x72\xc1\xe4\x69\xe8\xbd\x7f\xa5\x61\x8b\xa6\xd8\x3f\x78\x39\x61\x35\x71\xb8\x6b\x3b\x7b\xf8\xf0\xf8\x34\xf1\x69\x8f\x8c\x23\xe9\x7c\x02\x71\x57\x7c\xaf\xa4\x41\x69\x6e\xdd\xb6\x1d\x43\x0e\x31\xab\xaa\x52\x14\xcc\x6d\xf1\x0b\x97\x9a\x78\xdc\xcb\x8e\x6f\x37\x8a\x9f\x72\xf8\xf5\xf1\xc3\xfb\xac\x7d\x20\xb1\x3d\x25\x84\x9f\xd2\xb3\x25\x67\xad\xc4\x16\x92\x37\xf6\x84\x74\xc2\xad\x0d\x79\x50\x23\x23\xd4\xaa\x7c\xc6\xb7\xc0\x41\xd3\xf9\x50\xa0\x74\xf0\xdd\xb3\x13\x1d\x09\x9d\x7e\xed\x12\x1e\x92\x9c\xf7\xb7\x71\x93\x31\xf7\xaf\x08\x75\xa6\xfe\x99\x72\x35\x7b\x52\x2f\x7e\x5f\xf7\x47\x83\xc4\x55\x69\xc3\x4c\xad\xdd\xc7\xd8\x7f\x8b\xcf\x43\x4f\x78\x34\x23\x6a\x13\x6e\x9c\x19\xd6\x93\x73\x30\xe7\x41\x92\x2e\xa3\x11\x93\x18\xdd\x4a\x31\x08\xe9\x01\x6f\x33\x7a\xfd\x2c\x93\x38\x50\xe6\x7b\x64\xe1\x98\x30\x87\xc1\x98\x3b\x1c\x8c\x06\xfc\x22\xaf\xb2\x0e\xf9\xf7\xb5\x84\xba\x2e\x4d\x7f\x6a\xf8\x37\x00\x00\xff\xff\x00\x06\xe9\xef\x55\x09\x00\x00")

func tsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_tsGotemplate,
		"ts.gotemplate",
	)
}

func tsGotemplate() (*asset, error) {
	bytes, err := tsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ts.gotemplate", size: 2389, mode: os.FileMode(420), modTime: time.Unix(1586416495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _method_docGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4d\x6e\x32\x31\x0c\x86\xf7\x39\x85\x25\x58\xa1\x8f\x1c\x00\xe9\x5b\xa0\x56\x45\x54\xf4\x9f\x03\x4c\x0a\x26\x44\xca\x24\x28\xc9\xa8\xad\x92\xdc\xbd\xca\xcf\xcc\x74\x50\x17\x65\x13\xfc\x8e\xfd\xda\x7e\x3c\x03\xef\xe7\x74\x23\xf5\x3b\x93\x74\x83\x0a\x0d\x73\xda\xd0\x97\x8e\x49\xa0\x0f\xe8\xce\xfa\x18\x23\x21\xde\xd7\x80\xde\xe8\xb6\x45\xe5\x92\xb8\x80\xa2\xad\xa0\xf9\x83\x49\x43\x16\xf0\x8a\xae\x33\xca\xe6\x82\xde\xb0\x68\xfb\xaf\x0b\xa6\x1c\xef\x3f\x84\x3b\xf7\x55\x74\x6d\xb8\x8d\x91\x2c\x60\x6d\x78\x97\xfa\xda\x15\x21\x01\x9e\xb5\x15\x4e\x68\x05\x01\x1e\x59\x8b\x10\x20\xd5\x43\x20\x61\x39\xfc\xc2\xf4\x21\xde\x2f\xc1\x30\xc5\x11\xe6\x42\x1d\xf1\xf3\x1f\xcc\x99\xe1\xb0\xfa\x0f\x34\x46\x12\x12\x87\xac\xc7\x08\x39\x60\x86\xd3\x64\x9e\xe3\xa6\x0a\x4f\x17\x1b\x63\xfd\x5f\x47\x86\x62\x8d\x2a\x81\xf2\xbe\xbc\xbf\x75\x93\xfa\xc0\x64\x9e\x33\xf5\xac\x0b\xee\x7a\xd1\xc2\x40\x70\xdb\x5e\xb4\x49\x84\x67\xb3\x7c\x9e\xa1\xb0\xb6\x24\xde\x8b\xd3\x0f\x3f\xba\xb5\x6f\xce\x74\x07\x97\xf7\xb8\xb7\x99\x4b\x01\x02\xf5\x5c\x23\x9a\xe9\x73\x4d\x66\xf4\x2c\x8e\x77\x02\xe5\xd1\x56\x3e\x74\xcf\x78\x4f\x63\xdc\x3e\x7d\x18\xba\xc0\x49\x18\xeb\x76\x42\x21\xa4\xcc\x09\x99\x25\xa0\xb4\x69\xfc\xa6\x69\xb8\x26\x2e\x0d\x38\xd9\xee\x16\x4f\x42\xe5\xbb\x96\xa4\xeb\xea\x42\xf6\x3b\x00\x00\xff\xff\xb0\x28\xe0\x93\xb2\x02\x00\x00")

func method_docGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_method_docGotemplate,
		"method_doc.gotemplate",
	)
}

func method_docGotemplate() (*asset, error) {
	bytes, err := method_docGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "method_doc.gotemplate", size: 690, mode: os.FileMode(420), modTime: time.Unix(1586438099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.gotemplate":   templateGotemplate,
	"python.gotemplate":     pythonGotemplate,
	"js.gotemplate":         jsGotemplate,
	"ts.gotemplate":         tsGotemplate,
	"method_doc.gotemplate": method_docGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"js.gotemplate":         &bintree{jsGotemplate, map[string]*bintree{}},
	"method_doc.gotemplate": &bintree{method_docGotemplate, map[string]*bintree{}},
	"python.gotemplate":     &bintree{pythonGotemplate, map[string]*bintree{}},
	"template.gotemplate":   &bintree{templateGotemplate, map[string]*bintree{}},
	"ts.gotemplate":         &bintree{tsGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
