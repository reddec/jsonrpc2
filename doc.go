// JSON-RPC 2.0 supporting library
//
// Main object - Router doesn't need any kind of initialization. Just use `var router Router`.
//
// There are two ways how to register service: dynamical and static.
//
// Static
//
// This is recommended way. jsonrpc2-gen tool will generate type-safe wrapper with positional and named arguments
// support.
//
// Tool can be installed by `go get -v github.com/reddec/jsonrpc2/cmd/...` or by other method (see README.md)
//
// For example:
//
//
//Assume you have an interface file (`user.go`) like this:
//
//
//		package abc
//
//		type User interface {
//			Profile(token string) (*Profile, error)
//		}
//
//
//Just invoke `jsonrpc2-gen -i user.go -o user_gen.go -I User -p abc`
//
//You will get `user_gen.go` file like that:
//
//
//
//		// Code generated by jsonrpc2-gen. DO NOT EDIT.
//		//go:generate jsonrpc2-gen -i user.go -o user_gen.go -I User -p abc
//		package abc
//
//		import (
//			"encoding/json"
//			jsonrpc2 "github.com/reddec/jsonrpc2"
//		)
//
//		func RegisterUser(router *jsonrpc2.Router, wrap User) []string {
//			router.RegisterFunc("User.Profile", func(params json.RawMessage, positional bool) (interface{}, error) {
//				var args struct {
//					Arg0 string `json:"token"`
//				}
//				var err error
//				if positional {
//					err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
//				} else {
//					err = json.Unmarshal(params, &args)
//				}
//				if err != nil {
//					return nil, err
//				}
//				return wrap.Profile(args.Arg0)
//			})
//
//			return []string{"User.Profile"}
//		}
//
// Dynamic
//
// By using RegisterPositionalOnly or RegisterNamedOnly. This two functions are heavily relying on
// reflection so don't use in a high-load environment.
//
// HTTP expose
//
// Helper `Server` can expose JSON-RPC over HTTP with supported methods POST, PUT, PATCH. For other
// methods server will return MethodNotAllowed (405)
package jsonrpc2
